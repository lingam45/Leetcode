#First, initialize class for TrieNode for the nodes of trie data structure
class TrieNode:
    #Create the constructor function for this class with def __init__(self)
    def __init__(self):
        #Initialize the children nodes of the TrieNode to a hashmap
        self.children = {}
        #Initialize word as False. This will later help us check in Trie class whether word exists or not
        self.word = False

    #Create another function that takes (self, word) as parameters
    def addWord(self, word):
        #Initialize pointer cur to self
        cur = self

        #Iterate through every character in word for c
        for c in word:
            #Check if character c doesn't exist in trie by checking in cur.children hashmap
            if c not in cur.children:
                #Add character to trie using TrieNode() class
                cur.children[c] = TrieNode()
            #Update cur pointer to the new inserted curr.children[c]
            cur = cur.children[c]
        #Update cur.word to True as the word exists now
        cur.word = True

class Solution:
    def findWords(self, board: List[List[str]], words: List[str]) -> List[str]:
        #Initialize root to TrieNode()
        root = TrieNode()
        #Iterate for w in words
        for w in words:
            #Add w to root using root.addWord()
            root.addWord(w)

        #Initalize rows and cols of the board
        rows = len(board)
        cols = len(board[0])

        #Initialize res, visit to hashsets
        res, visit = set(), set()

        #Create dfs helper function taking r, c, node, word as parameters
        def dfs(r, c, node, word):
            #Check if r, c is out of bounds(both less than and greater than), or, board[r][c] not in node.children, or, grid was already visited
            if (r < 0 or c < 0 or r == rows or c == cols or (r, c) in visit or board[r][c] not in node.children):
                #return
                return

            #Add (r, c) to visit hashset
            visit.add((r, c))
            #Update node = node.children[board[r][c]]
            node = node.children[board[r][c]]
            #Update word by adding board[r][c] to it
            word += board[r][c]
            #Check if node.word
            if node.word:
                #Add word to res hashset
                res.add(word)

            #Recursively call dfs functions on neighbouring cells at top, left, bottom, down
            dfs(r + 1, c, node, word)
            dfs(r, c + 1, node, word)
            dfs(r - 1, c, node, word)
            dfs(r, c - 1, node, word)

            #Backtrack by removing (r, c) from visit hashset
            visit.remove((r, c))

        #Iterate through grid
        for r in range(rows):
            for c in range(cols):
                #Call dfs() by passing r, c, root, "" as parameters
                dfs(r, c, root, "")

        #return list(res) as res is a hashset and list() converts that to a list
        return list(res) 
