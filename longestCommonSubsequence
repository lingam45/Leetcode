class Solution:
    def longestCommonSubsequence(self, text1: str, text2: str) -> int:
        #text1="abcde",text2="ace"
        #step 1:len of text1(n) len(text2) as m 
        n=len(text1)
        m=len(text2)
        #step 2: dp 2d matrix ofn size (m+1)*(n+1)---- default 0
        dp=[[0]*(n+1) for _ in range(m+1)] 
        for i in range(1,m+1):
            for j in range(1,n+1):
                if text1[j-1]==text2[i-1]:
                    dp[i][j]=dp[i-1][j-1]+1
                else:
                    dp[i][j]=max(dp[i][j-1],dp[i-1][j])
        #step 3: in dp from(1,1) to (m,n) update dp 
        # cond1:text1(j-1)==text2(j-1)--->dp[i][j]=diag+1
        #else: max(left cell and top cell)
        return dp[-1][-1]
